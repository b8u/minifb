intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
#import xxxx_libs += libhello%lib{hello}

# Public headers.
#
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

lib{minifb}: $pub/{$pub_hdrs}

# Config
#
if $config.libminifb.use_opengl_api
{
  lib{minifb}: cc.poptions =+ -DUSE_OPENGL_API
  import impl_libs =+ libopengl-meta%lib{opengl-gl}
  if ($cc.target.class != 'windows')
  {
    import impl_libs =+ libopengl-meta%lib{opengl-glut} libopengl-meta%lib{opengl-glu}
  }
}
if $config.libminifb.use_wayland_api
{
  # Can be linux/bsd only (checked in the config).
  import impl_libs =+ libwayland-client%lib{wayland-client}
  import impl_libs =+ libwayland-cursor%lib{wayland-cursor}
}
else
{
  if ($cc.target.class == 'linux' || $cc.target.class == 'bsd')
  {
    c.libs =+ -lX11
    c.coptions =+ -Wno-switch
  }
}
if $config.libminifb.use_inverted_y_on_macos
{
  cc.poptions =+ -DUSE_INVERTED_Y_ON_MACOS
}
if $config.libminifb.use_metal_api
{
  cc.poptions =+ -DUSE_METAL_API
}

# OS specific settings
#
switch $cc.target.class
{
  case 'linux'
  {
  }
  case 'macos'
  {
    cc.loptions =+ -framework Cocoa -framework QuartzCore \
                   -framework Metal -framework MetalKit

    cc.coptions =+ -Wno-cast-function-type
  }
  case 'windows'
  {
    cc.poptions =+ -D_WIN32_WINNT=0x0601
    import impl_libs =+ winmm%lib{winmm} gdi32%lib{gdi32}
  }
}

# Compiler specific
#
switch $cc.target.system
{
  case 'win32-msvc'
  {
    # What to do with `if(MSVC_VERSION GREATER_EQUAL 1900)`?
    cc.coptions =+ /GS /Gy /EHsc /fp:fast /Zc:__cplusplus /wd4244
    cc.poptions =+ -D_CRT_SECURE_NO_WARNINGS
  }
}

# Private headers and sources as well as dependencies.
#
lib{minifb}: \
  {h c}{MiniFB_internal} \
  {c}{MiniFB_common MiniFB_timer} \
  {h}{WindowData} \
  $impl_libs \
  $intf_libs \
  {cxx}{MiniFB_cpp.cpp}

lib{minifb}: c{MiniFB_linux}:                                  include = ($cc.target.class == 'linux' || $cc.target.class == 'bsd')
lib{minifb}: windows/c{WinMiniFB} windows/{h}{WindowData_Win}: include = ($cc.target.class == 'windows')
lib{minifb}: gl/{h c}{MiniFB_GL}:                              include = ($config.libminifb.use_opengl_api)
lib{minifb}: x11/{c}{X11MiniFB} x11/{h}{WindowData_X11}:       include = (!$config.libminifb.use_wayland_api && ($cc.target.class == 'linux' || $cc.target.class == 'bsd'))


# Build options.
#
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

cc.poptions =+ "-I$out_pfx_src" "-I$src_pfx_src" \
              "-I$out_pfx_inc" "-I$src_pfx_inc"

{hbmia obja}{*}: cc.poptions += -DLIBMINIFB_STATIC_BUILD
{hbmis objs}{*}: cc.poptions += -DLIBMINIFB_SHARED_BUILD

# Export options.
#
lib{minifb}:
{
  cc.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
  cc.export.libs = $intf_libs
}

liba{minifb}: cc.export.poptions += -DLIBMINIFB_STATIC
libs{minifb}: cc.export.poptions += -DLIBMINIFB_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{minifb}: bin.lib.version = "-$version.project_id"
else
  lib{minifb}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
#
h{*}: install = false
